目标：
1，实现mybatis-plus的generator自动生成entity，dao，mapper， 2，实现provider和consumer端对dubbo服务后台DB数据查询的操作 3，整合druid

项目结构：
   common为公共模块，提供DB实体，dao，service， provider为服务提供者,提供impl，consumer为消费者，

其实gradle非常强大，可以加插件，插件引入后就会有个generator的task，在other组中，比较好的插件：https://blog.csdn.net/cpongo4/article/details/86613812
我研究使用了一番，发现不能使用，原因未知，作者说的使用方法也略简陋，最后还是通过mgp的官方方法，主要的点在于xml文件中的各种配置项目。

注意：
1，当模块间引用bean时，需先将module依赖加入到build.gradle,再在启动类上扩大bean扫描范围
@SpringBootApplication(scanBasePackages = {"com.example.provider","com.example.common.order"})
或者写成@SpringBootApplication(scanBasePackages = "com.example")

经过多次尝试的可行方案：@SpringBootApplication(scanBasePackages = "com.example")，并配合将
provider的启动类也放到com.example包下，不能是com.example.provider包下，

2.dao类需要添加 @Mapper 否则，出现type bean not found 错误，需要在dao上添加两者的注解，
或者启动类上@MapperScan（）
注意 @Mapper 和 @Repository 的区别
@Mapper 是iBatis的注解，用于将实体和数据表映射，
@Repository是Spring的注解，用于注入bean，

3.common/consumer均需要配置datasource.否则提示datasource错误。

4.字段与属性关系，可指定：<result column="gmt_create" property="gmtCreate" javaType="Date" jdbcType="TIME"/>
https://blog.csdn.net/weixin_42901061/article/details/88314798

5......Cannot generate variable name for non-typed Collection return type and an em
 几个小时，终于找到原因：在页面发送一个请求时遇到这个错误，原因是Controller 方法里的返回形参 List 后面没写类型，加上类型 如List<User>，就OK 了

6.Mysql中Datetime类型字段自动生成的实体类，会对应为LocalDateTime类型，注意要修改为Date类型，否则出错，
https://blog.csdn.net/weixin_42901061/article/details/88314798

7，大坑：后端List有数据，但前端接收数据一致显示[{},{}]，找了几个小时，各种数据验证，原来是Lombok插件不兼容，lombok插件必须要对应相应的idea版本号，这个坑很隐蔽，不会报任何error，原因就是实体对象没有get/set导致，解决，要么直接实现get/set，要么修改lombok插件！

8. 大收获：经测试，在provider的impl上可以同时加上dubbo/springFramework的两个@service注解，然后provider中可以直接@Autowire使用，consumer中通过@Reference也可以使用！还有一点，RPC调用，通过仔细观察后台输出，发现真正执行业务的provider，可通过SQL打印验证，而consumer只是获取结果，其实这也是RPC的原理。

9.写代码别眼高手低，只有自己干一遍代码，就会碰见各种问题，解决问题的过程是痛苦的，但解决后的荷尔蒙让你会很爽。怎么难怎么来，别人用maven，我用gradle，保证你遇见各种问题。


